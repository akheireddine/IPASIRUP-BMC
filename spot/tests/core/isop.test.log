+ . ./defs
+ test -f ./defs
+ test -z .
+ test -f ./../core/defs.in
+ echo == Running test isop.test
== Running test isop.test
+ echo isop.test
+ sed -e s,.*[\/],,;s/\.test$//
+ me=isop
+ testSubDir=isop.dir
+ chmod -R a+rwx isop.dir
+ rm -rf isop.dir
+ mkdir isop.dir
+ cd isop.dir
+ srcdir=../.
+ AWK=gawk
+ DOT=dot
+ LBTT=
+ LBTT_TRANSLATE=
+ VALGRIND=valgrind
+ SPIN=
+ LTL2BA=
+ PYTHON=
+ top_srcdir=/home/nissa/Documents/WORKS/cadical-user-propagation/spot
+ unset SPOT_DOTEXTRA
+ unset SPOT_DOTDEFAULT
+ set -x
+ set -e
+ cat
+ run 0 ltlfilt --boolean-to-isop input
+ expected_exitcode=0
+ shift
+ exitcode=0
+ test -n valgrind
+ command -v ltlfilt
+ cmd=/home/nissa/Documents/WORKS/cadical-user-propagation/spot/bin/ltlfilt
+ shift
+ test -n /home/nissa/Documents/WORKS/cadical-user-propagation/spot/bin/ltlfilt
+ set /home/nissa/Documents/WORKS/cadical-user-propagation/spot/bin/ltlfilt --boolean-to-isop input
+ exec
+ GLIBCXX_FORCE_NEW=1 /home/nissa/Documents/WORKS/cadical-user-propagation/spot/libtool --mode=execute valgrind --tool=memcheck --leak-check=yes --log-fd=6 -q /home/nissa/Documents/WORKS/cadical-user-propagation/spot/bin/ltlfilt --boolean-to-isop input
+ cat valgrind.err
+ sed 1q valgrind.err
+ test -z 
+ rm -f valgrind.err
+ test 0 = 0
+ cat
+ cat output
(!a & !b) | (b & d)
(!a | b) & (!b | d) & Xc
GF(b | (a & d))
{{{!a && !b} | {b && d}}[*];a[*]}<>-> ((!a & b) | (a & !b))
+ diff output expected
+ run 0 ltlfilt input
+ expected_exitcode=0
+ shift
+ exitcode=0
+ test -n valgrind
+ command -v ltlfilt
+ cmd=/home/nissa/Documents/WORKS/cadical-user-propagation/spot/bin/ltlfilt
+ shift
+ test -n /home/nissa/Documents/WORKS/cadical-user-propagation/spot/bin/ltlfilt
+ set /home/nissa/Documents/WORKS/cadical-user-propagation/spot/bin/ltlfilt input
+ exec
+ GLIBCXX_FORCE_NEW=1 /home/nissa/Documents/WORKS/cadical-user-propagation/spot/libtool --mode=execute valgrind --tool=memcheck --leak-check=yes --log-fd=6 -q /home/nissa/Documents/WORKS/cadical-user-propagation/spot/bin/ltlfilt input
+ cat valgrind.err
+ sed 1q valgrind.err
+ test -z 
+ rm -f valgrind.err
+ test 0 = 0
+ cat
+ cat output
(a -> b) & (b -> d)
(a -> b) & (b -> d) & Xc
GF((a | b) & (b | d))
{{{a -> b} && {b -> d}}[*];a[*]}<>-> ((a | b) & (!a | !b))
+ diff output expected
PASS core/isop.test (exit status: 0)
